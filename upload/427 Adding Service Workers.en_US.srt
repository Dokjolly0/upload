1
00:00:02,200 --> 00:00:06,440
Let's first of all, understand what a service worker actually is.

2
00:00:07,240 --> 00:00:10,580
Now, this is how our JavaScript code typically behaves.

3
00:00:10,720 --> 00:00:12,180
It runs in a single thread.

4
00:00:12,400 --> 00:00:19,440
That means our Web application, which can consist of multiple pages or in the case of an angular app

5
00:00:19,450 --> 00:00:20,620
with one page only.

6
00:00:21,190 --> 00:00:23,490
This app often uses JavaScript.

7
00:00:23,500 --> 00:00:28,370
And if you are using ANGULAR, you're of course using JavaScript because ANGULAR uses JavaScript.

8
00:00:28,810 --> 00:00:36,370
So this JavaScript code, the entire angular app runs on one single threat and JavaScript has its features

9
00:00:36,370 --> 00:00:39,720
to still handle asynchronous code and not block the execution.

10
00:00:39,910 --> 00:00:41,620
But this is all normal JavaScript.

11
00:00:42,130 --> 00:00:47,850
Now, JavaScript and the browser also offers us to run an additional threat.

12
00:00:48,430 --> 00:00:55,620
We can run a so-called weap worker and a special form of Battisti service worker on another threat.

13
00:00:55,690 --> 00:00:58,300
So this is still then uses one of the same threat.

14
00:00:58,420 --> 00:01:01,470
But it's a different threat than your main JavaScript code.

15
00:01:01,900 --> 00:01:07,430
And the important part is that this threat is kind of decoupled from your HTML pages.

16
00:01:07,840 --> 00:01:11,260
So this means that this can also continue running in the background.

17
00:01:11,260 --> 00:01:15,690
For example, on your mobile phone, that is something mobile browsers typically offer.

18
00:01:15,910 --> 00:01:22,450
This can continue running and it could therefore also do advanced things like receive push notifications.

19
00:01:22,810 --> 00:01:26,290
Take my full progressive Web app course if you want to learn more about this.

20
00:01:26,710 --> 00:01:32,680
But one other crucial thing that a service worker can do is it can manage all your different pages in

21
00:01:32,680 --> 00:01:38,020
case you got multiple pages or you're a single page if you're building an angular app and it can listen

22
00:01:38,020 --> 00:01:45,930
to outgoing network's request so it can listen to you requests going out of your webpage.

23
00:01:45,940 --> 00:01:52,600
For example, if you're fetching the assets off that Web page to see us as code to font JavaScript or

24
00:01:52,600 --> 00:01:59,380
also data from an API, the service worker can catch these outgoing requests and do something with them,

25
00:01:59,560 --> 00:02:07,660
like, for example, cache the responses in a special cache storage or then also return these cached

26
00:02:07,660 --> 00:02:11,200
responses back to your page so that it also works.

27
00:02:11,200 --> 00:02:15,840
If you got no Internet connection, of course, only if there is a cached version available.

28
00:02:16,360 --> 00:02:18,100
This is what the service worker does.

29
00:02:18,100 --> 00:02:26,200
It can be seen as a proxy between your app, your front end app and DDH request you're sending to the

30
00:02:26,200 --> 00:02:26,800
backend.

31
00:02:26,800 --> 00:02:32,740
It proxies that request, which means it catches it does something with it and might then allow it to

32
00:02:32,740 --> 00:02:34,450
still go on and leave the app.

33
00:02:34,450 --> 00:02:35,920
But it could also block this.

34
00:02:36,520 --> 00:02:42,310
Now, configuring such a service worker and writing it from scratch is something you can do and something

35
00:02:42,310 --> 00:02:47,740
you learn in my full progressive web app course there you also learn about features like push notifications

36
00:02:47,740 --> 00:02:55,420
and so on for this video will focus on how Angular can easily add such a service worker to our angular

37
00:02:55,420 --> 00:03:00,070
app because it turns out that there is a special package we can install for that.

38
00:03:00,070 --> 00:03:06,010
Let's quit engy service and now here it's important that you're using the latest Seelie version for

39
00:03:06,010 --> 00:03:08,110
that project and this project does.

40
00:03:08,470 --> 00:03:14,230
And then you can run energy adds to add a third party package.

41
00:03:14,230 --> 00:03:22,450
But that's more than just a NPM library, really some functionality to your app and only some features

42
00:03:22,450 --> 00:03:28,540
can be added because essentially does will execute a command which has to be defined by whichever package

43
00:03:28,540 --> 00:03:29,610
you are targeting.

44
00:03:29,710 --> 00:03:36,130
So not every not even close, not every third party library supports this feature, but there is a special

45
00:03:36,130 --> 00:03:41,170
library which does support it, which you can target with at angular weight.

46
00:03:41,710 --> 00:03:48,100
And if you run this, this will actually configure your existing project to use the angular service

47
00:03:48,100 --> 00:03:52,180
worker package and start with a pre configured service worker.

48
00:03:52,180 --> 00:03:53,590
So does a lot for you.

49
00:03:54,040 --> 00:03:59,410
You can already see it added some things to the index HTML file like the no script section to give a

50
00:03:59,410 --> 00:04:02,020
warning of JavaScript is turned off because we need that.

51
00:04:02,020 --> 00:04:08,830
Of course we need to turn on it loads this manifest here, which is also generated now that is important

52
00:04:08,830 --> 00:04:11,980
for actually having a launcher icon for your app.

53
00:04:12,160 --> 00:04:16,480
If you have it on a mobile phone, you can even save it to the home screen and then started with that

54
00:04:16,630 --> 00:04:19,390
and you can define which icon that should use and so on.

55
00:04:19,660 --> 00:04:22,060
So DataStore manifest adjacent file again.

56
00:04:22,060 --> 00:04:24,640
Learn more in that course I mentioned for us.

57
00:04:24,640 --> 00:04:31,210
Interesting is the app module because in the app module we are using a service worker module which is

58
00:04:31,210 --> 00:04:33,610
imported from at angular service worker.

59
00:04:33,910 --> 00:04:38,500
And this is really an official package of the angular framework and it does what it sounds like.

60
00:04:38,500 --> 00:04:45,670
It registers a service worker, which will be that proxy that catches outgoing requests and does something

61
00:04:45,670 --> 00:04:50,170
with them, and you will learn how to configure what it does to them later in this video.

62
00:04:50,170 --> 00:04:57,940
Of course, we use it here by calling the register method and dare we target dng S.W. worker dot js

63
00:04:57,940 --> 00:05:00,760
file and you won't find that file here.

64
00:05:00,970 --> 00:05:01,590
And the reason.

65
00:05:01,670 --> 00:05:05,600
Your dad is the disk file will actually be auto generated.

66
00:05:05,870 --> 00:05:11,360
It will be generated during the build process and it will be in the disk folder, Darfur, and it will

67
00:05:11,360 --> 00:05:16,940
hold your service worker, which will contain a lot of functionality, which you don't have to and typically

68
00:05:16,940 --> 00:05:18,480
don't want to write on your own.

69
00:05:19,220 --> 00:05:25,610
And here it's all configured to only be added if you're building for production in the assets folder.

70
00:05:25,640 --> 00:05:31,700
We see some icons were added for that manifest adjacent file and in the project folder we see that in

71
00:05:31,700 --> 00:05:32,790
the package to trace the file.

72
00:05:32,810 --> 00:05:33,610
Something changed.

73
00:05:33,620 --> 00:05:39,050
For example, the angular package was added, which includes that angular service worker package.

74
00:05:39,800 --> 00:05:46,070
And we got this NGF config file disaster file where you can configure that service worker, which will

75
00:05:46,070 --> 00:05:46,790
be generated.

76
00:05:46,940 --> 00:05:48,880
But we'll take a closer look at this in a second.

77
00:05:49,460 --> 00:05:55,580
The angular adjacent file, which manages to Seelie project all the was adjusted a little bit there.

78
00:05:55,760 --> 00:05:59,150
Service worker is set to true for the production build.

79
00:05:59,390 --> 00:06:06,040
This is required because the service worker will cache certain resources and to ensure that the newbuild

80
00:06:06,200 --> 00:06:12,890
updates the service worker, these resources will contain a hash and dad will then also be injected

81
00:06:12,890 --> 00:06:18,020
into the service worker, which is why we need to make the build process aware of the fact that we need

82
00:06:18,020 --> 00:06:18,860
a service worker.

83
00:06:18,920 --> 00:06:19,820
This is how it works.

84
00:06:20,240 --> 00:06:25,520
Now, let's simply see that in action, let's create a production build by running energy, build dash,

85
00:06:25,520 --> 00:06:26,390
dash prot.

86
00:06:26,690 --> 00:06:31,430
And this will now bundle and optimize the entire app use ahead of time, computation and so on.

87
00:06:31,580 --> 00:06:35,060
And it will spit out our angular app in a dist folder.

88
00:06:35,210 --> 00:06:37,460
And there we should then also see the service worker.

89
00:06:37,760 --> 00:06:41,260
So let's have a look to close the source tab here.

90
00:06:41,270 --> 00:06:45,950
Let's refresh your statistic folder of the Angler folder for the project.

91
00:06:46,380 --> 00:06:49,640
And there we see that Engy S.W. worker JS file.

92
00:06:49,850 --> 00:06:54,350
You remember that is the file we are importing in the app module here.

93
00:06:54,350 --> 00:06:55,610
We're registering it here.

94
00:06:56,360 --> 00:06:58,300
So this can be found in the disk folder.

95
00:06:58,310 --> 00:07:03,710
Indeed, if we have a look at it, you see there's a lot of code in there because, well, it's actually

96
00:07:03,710 --> 00:07:08,550
pre generated for you to do all that caching and so on in a very efficient way.

97
00:07:09,320 --> 00:07:12,920
And now let's simply do what it lets simply see what it does.

98
00:07:13,190 --> 00:07:19,130
And for that, you need a Web server you can run to host your production.

99
00:07:19,130 --> 00:07:21,950
Appia, you could do it with Engy serve.

100
00:07:23,920 --> 00:07:29,380
It but there will actually not see the service worker in action correctly because it will only build

101
00:07:29,380 --> 00:07:30,100
it in memory.

102
00:07:30,430 --> 00:07:34,570
So therefore what you should do is install a lightweight node server.

103
00:07:34,570 --> 00:07:40,570
And thankfully, there is one, you can install it with NPM, install Dadge to install it globally,

104
00:07:40,900 --> 00:07:42,680
HTP server.

105
00:07:43,180 --> 00:07:49,450
This is a package you can use to launch a simple node based server which will host the content of the

106
00:07:49,450 --> 00:07:53,770
folder you run the command in and to command you need to run is just.

107
00:07:55,050 --> 00:08:03,570
It should be their server, so let's navigate into our disk folder and there in the angular folder and

108
00:08:03,570 --> 00:08:12,090
let's run HTP server and then you can assign a port with the ISP 881, for example, and build and bring

109
00:08:12,090 --> 00:08:12,600
this up.

110
00:08:12,600 --> 00:08:15,210
And now you can Wizzit localhost.

111
00:08:16,530 --> 00:08:19,680
881, and you should see your angular app there.

112
00:08:19,920 --> 00:08:24,960
Now this app looks like a normal app now reloaded once to make sure that the service worker can do its

113
00:08:24,960 --> 00:08:26,930
work and go to application again.

114
00:08:27,210 --> 00:08:31,770
We should now see that under application we got that energy worker running.

115
00:08:32,110 --> 00:08:34,780
And if you don't see that, try reloading the page one more time.

116
00:08:35,300 --> 00:08:37,770
Also, make sure to clear the storage here entirely.

117
00:08:37,950 --> 00:08:44,520
If you worked with service workers and Dysport served on your local domain before now, you should see

118
00:08:44,520 --> 00:08:44,880
that.

119
00:08:45,030 --> 00:08:50,660
The interesting part is if I now take offline again and I reload, it still works, right?

120
00:08:50,850 --> 00:08:56,190
We still see the same content as before, even though we're offline now.

121
00:08:56,190 --> 00:08:57,120
How can that work?

122
00:08:58,050 --> 00:09:04,380
If you go to the network tap and we clear it and we now reload, we see we're making a bunch of requests

123
00:09:04,380 --> 00:09:09,800
here and they're all essentially served from DNG service workers here.

124
00:09:09,810 --> 00:09:11,790
So from the service worker, this is all served.

125
00:09:12,300 --> 00:09:17,730
The interesting part is the Post's request here, probably, which is still kind of can connect to the

126
00:09:18,330 --> 00:09:20,160
outgoing server for that.

127
00:09:20,160 --> 00:09:24,300
Let's again disable Wi-Fi and let's try this again.

128
00:09:26,030 --> 00:09:31,670
And now it just does not work, but what we can see still is that for one, there is a Baggara and intended

129
00:09:31,670 --> 00:09:36,920
behavior in Chrome, which leads to these API requests still going through, even if we simulate offline

130
00:09:36,920 --> 00:09:37,170
mode.

131
00:09:37,760 --> 00:09:40,250
But more interestingly, we see a white page.

132
00:09:40,250 --> 00:09:43,880
We don't see that there is no Internet connection error.

133
00:09:44,390 --> 00:09:49,160
Now, we would not just see a white page, we would see any content we add here.

134
00:09:50,180 --> 00:09:55,850
If we lowered our page, so we essentially see everything that's hard coded into our angular app, the

135
00:09:55,850 --> 00:09:57,630
dynamic content is missing.

136
00:09:57,650 --> 00:09:59,210
We'll take a look at this in a second.

137
00:09:59,390 --> 00:10:05,510
But all the hard coded content is there because what we can see in the network tab, instead we're loading

138
00:10:05,510 --> 00:10:13,280
the main page, the styles, not the font, but the styles, the JavaScript files, all that is loaded

139
00:10:13,280 --> 00:10:19,530
from the service worker and to failing things are the font and our posts.

140
00:10:20,300 --> 00:10:22,550
Let me turn wi fi back on.

141
00:10:24,160 --> 00:10:29,710
And I'll leave that simulation mode, which didn't work too great, I guess, and now, of course,

142
00:10:29,710 --> 00:10:33,850
if I reload, it again works and let's now change something.

143
00:10:33,970 --> 00:10:37,800
First of all, let's change something at the app component there.

144
00:10:37,810 --> 00:10:41,680
I'll add one tech where I say my posts.

145
00:10:42,620 --> 00:10:48,920
Now, let's quit that HP server, go back into the main folder and let's run energy, build dash dash

146
00:10:49,340 --> 00:10:52,400
again and let's see how this now changes the app.

147
00:10:52,400 --> 00:10:58,070
And if I'm right regarding my statement that hard coded content would be cached.

148
00:10:58,580 --> 00:11:02,120
So let's wait for this to finish for that built to finish.

149
00:11:02,270 --> 00:11:09,740
And once it's finished, let's go back into that test folder and there into that angular folder and

150
00:11:09,740 --> 00:11:12,260
let's run our server command again.

151
00:11:12,260 --> 00:11:14,330
So HP server on that port.

152
00:11:14,870 --> 00:11:21,230
Let's reload the application here and you might need to reload twice and you should see my posts.

153
00:11:21,410 --> 00:11:27,890
The reason for that double reload is that the service worker was loaded and the service worker is aware

154
00:11:27,920 --> 00:11:34,520
of the fact that the index HTML file changed or that the script rendering content to it changed.

155
00:11:34,520 --> 00:11:37,220
To be precise, because of that hashing thing.

156
00:11:37,220 --> 00:11:43,580
I mentioned this hash table which is automatically generated and all default having hashes because by

157
00:11:43,580 --> 00:11:46,910
default it would, of course fetch these resources from the cache.

158
00:11:46,910 --> 00:11:48,310
So we would see the old version.

159
00:11:48,470 --> 00:11:49,420
We don't want that.

160
00:11:49,580 --> 00:11:55,970
So we take the new version by or we let us give the new version by using that angular service worker

161
00:11:55,970 --> 00:12:00,800
package, which takes care about that hashing and the fact that the service worker is aware of the new

162
00:12:00,800 --> 00:12:01,880
version for us.

163
00:12:02,420 --> 00:12:09,170
So we get that now if we go offline again, you see that is also part of the loaded page.

164
00:12:09,170 --> 00:12:12,750
And if I go fully offline by treating of wi fi, we still see that.

165
00:12:13,280 --> 00:12:18,940
So now the font and the API call, the API data is missing, I should say.

166
00:12:19,430 --> 00:12:25,670
So that is what I now want to change and to change this and get that same page here when we're offline,

167
00:12:25,670 --> 00:12:30,830
where as I'm getting when I'm online, we need to change the service worker config, which can be done

168
00:12:30,830 --> 00:12:33,380
in DNG as conflict adjacent file.

169
00:12:33,830 --> 00:12:37,730
Now in this file, you can configure how the angular service worker behaves.

170
00:12:37,760 --> 00:12:38,930
So let's take a closer look.

