1
00:00:02,090 --> 00:00:07,370
So it's configuration file time, we do have a bunch of files and let's go through them to understand

2
00:00:07,400 --> 00:00:08,310
what we got here.

3
00:00:08,630 --> 00:00:13,580
Now, please note over time some files and the content of some files can change.

4
00:00:13,790 --> 00:00:16,070
But the general idea, of course, is the same.

5
00:00:16,220 --> 00:00:18,200
Now, let's start with the editor config.

6
00:00:18,800 --> 00:00:24,920
This is a file which in the end is picked up by some editors, by some I.D. like stuccoed.

7
00:00:25,340 --> 00:00:33,620
And it basically tells the editor how to, for example, do indentation in this project so that it can

8
00:00:33,620 --> 00:00:40,550
override your user default settings or to the default settings and make sure that the code and this

9
00:00:40,550 --> 00:00:46,970
project actually is the same for all users across the entire world, no matter which ATM they use.

10
00:00:47,120 --> 00:00:49,310
So this is simply a code style thing.

11
00:00:49,520 --> 00:00:56,450
Does, of course, does not affect the way Angouleme works or how you write angular code.

12
00:00:56,450 --> 00:01:00,440
It really just influences how to code looks like and is formatted.

13
00:01:01,700 --> 00:01:07,370
Phrygia RC, by the way, is kind of related to this, but it's not part of a default angler project,

14
00:01:07,370 --> 00:01:08,720
at least not at the point of time.

15
00:01:08,720 --> 00:01:09,470
I'm recording this.

16
00:01:09,830 --> 00:01:15,950
This is a file I added here to tell this auto formatting tool year, which I'm using behind the scenes

17
00:01:16,310 --> 00:01:19,040
to basically use single instead of double quotes.

18
00:01:19,250 --> 00:01:21,720
So in the end, this should work together with Ed config.

19
00:01:22,100 --> 00:01:24,320
Now I skipped git ignore, git ignore.

20
00:01:24,320 --> 00:01:29,750
Of course matters if you're working with git get is a source control tool.

21
00:01:29,750 --> 00:01:34,880
It helps you create code snapshots and go back to older code snapshots.

22
00:01:34,880 --> 00:01:40,070
If you mess, something happens on and you can learn more about get with the attached, get starting

23
00:01:40,070 --> 00:01:46,950
resources and get ignore is a file which basically tells git which files it can ignore, which files

24
00:01:46,980 --> 00:01:52,550
don't want to manage with Git because they will be regenerated frequently like node modules which you

25
00:01:52,550 --> 00:01:55,610
generate by running NPM install and so on.

26
00:01:56,660 --> 00:02:02,060
Now, the angler, Jason Paul, is a bit of a more complex file, this manages your entire project configuration

27
00:02:02,180 --> 00:02:03,770
and it will come back to that in a second.

28
00:02:03,800 --> 00:02:07,160
Let's give it for now and let's move on to the browser's list instead.

29
00:02:07,460 --> 00:02:10,030
The browser's list file is an amazing file.

30
00:02:10,460 --> 00:02:16,160
This configuration file is picked up by the angular Seelie when you build your project for production

31
00:02:16,520 --> 00:02:21,420
and it basically tells the angular Seelie which browsers you want to support with your project.

32
00:02:21,530 --> 00:02:25,960
Now the seal it takes is information about which browsers you want to support.

33
00:02:25,970 --> 00:02:30,380
In my case, you, for example, that I don't want to support Internet Explorer nine to 11, which you

34
00:02:30,380 --> 00:02:34,340
would have to change your remove, not as you see if you do want to support it.

35
00:02:34,640 --> 00:02:41,180
And I will then use this information, for example, to adjust your S.O.S styles and prefix them to

36
00:02:41,180 --> 00:02:48,740
support all these browsers and also to load the right polie files and create the right code bundles

37
00:02:48,890 --> 00:02:55,280
that include those polie files and more on polyphenols and what the Seelie does with them later.

38
00:02:55,490 --> 00:03:00,080
But this really allows you to control which browsers your application supports.

39
00:03:00,380 --> 00:03:06,020
And of course, you want to be as restrictive as possible here and not as open as possible because that

40
00:03:06,020 --> 00:03:09,630
will ultimately lead to less code, which your users have to download.

41
00:03:09,800 --> 00:03:14,990
So if you know you don't have to support Internet Explorer nine to 11, well, you should not supported

42
00:03:15,230 --> 00:03:21,680
the Anglo framework, by the way, does support those browsers, but still excluding them can make sense

43
00:03:21,680 --> 00:03:25,700
to ship less code the kharma config file here.

44
00:03:26,150 --> 00:03:32,690
That's a file which is used for testing in the end for unit tests where angular dangler Seelie uses

45
00:03:32,690 --> 00:03:33,950
kharma behind the scenes.

46
00:03:34,430 --> 00:03:38,540
And unless you really know what you're doing, you should leave it the way it is.

47
00:03:38,750 --> 00:03:42,980
It allows defined you and how your tests are executed and so on.

48
00:03:44,350 --> 00:03:45,220
Package locked.

49
00:03:45,300 --> 00:03:50,200
Jason is a file which is generated based on your package, that Jason file, which in turn is a file

50
00:03:50,200 --> 00:03:54,900
that manages the packages your project uses and the workings of those packages.

51
00:03:55,150 --> 00:03:56,320
Not with my current theme.

52
00:03:56,320 --> 00:03:56,620
I see.

53
00:03:56,620 --> 00:03:57,630
That's a bit hard to read.

54
00:03:57,940 --> 00:04:02,120
So let me quickly switch just to a default dark plus theme where this is a bit easier to read.

55
00:04:02,380 --> 00:04:04,270
Now, what do we have here now?

56
00:04:04,300 --> 00:04:07,330
This package that Jason file has a couple of scripts we can execute.

57
00:04:08,200 --> 00:04:12,660
We can also use just the energy Comando, so we can ignore this behind the scenes.

58
00:04:12,670 --> 00:04:13,950
This uses the energy command.

59
00:04:14,410 --> 00:04:17,290
More interesting are the dependencies and def dependencies.

60
00:04:17,590 --> 00:04:22,780
I did talk about them early and of course, already in the end, these are the third party packages

61
00:04:22,780 --> 00:04:27,910
our project uses to build our application and to run successfully.

62
00:04:28,120 --> 00:04:34,000
That includes all the different parts of the angular framework are exchequers for observables and then

63
00:04:34,000 --> 00:04:35,740
some dependencies of the Angella framework.

64
00:04:36,160 --> 00:04:41,460
But we also got some development dependencies which are tools we only need to build our project.

65
00:04:41,560 --> 00:04:45,220
So this is not code which will be part of our running application.

66
00:04:45,490 --> 00:04:48,910
These will be tools that help us build the application efficiently.

67
00:04:49,390 --> 00:04:54,730
That's the angular Seelie and then a couple of tools used by the Sea Life for compiling and optimizing

68
00:04:54,730 --> 00:04:55,210
the code.

69
00:04:55,600 --> 00:05:01,420
We got Kharma for testing, we got typescript for compiling, typescript to JavaScript and so on.

70
00:05:02,320 --> 00:05:08,980
Now you use this file by running NPM install in the terminal or a command prompt.

71
00:05:08,980 --> 00:05:11,130
Navigate it into your project folder.

72
00:05:11,140 --> 00:05:14,800
And here I'm just using the built in one which you get with terminal new terminal.

73
00:05:15,400 --> 00:05:20,170
And this will basically create that node modules folder based on the dependencies mentioned here.

74
00:05:20,530 --> 00:05:26,890
It will also generate a package to lock Chazen file, which stores the exact workings of your third

75
00:05:26,890 --> 00:05:34,180
party dependencies, because here in packets of choice, you specify some minimum requirements and use

76
00:05:34,270 --> 00:05:35,410
some flexibility.

77
00:05:35,620 --> 00:05:40,540
And then once you do run, NPM install, you lock in certain exact versions which are saved in here.

78
00:05:40,840 --> 00:05:43,870
And last but not least, we got the TIAs config files down there.

79
00:05:44,140 --> 00:05:49,360
Now we see free conflict, adjacent files, descant figures to typescript compiler.

80
00:05:49,390 --> 00:05:54,340
And if you took my understanding, typescript course here in Euterpe, which of course is not a hard

81
00:05:54,340 --> 00:05:56,950
requirement, you know what you can set there?

82
00:05:57,430 --> 00:06:00,610
The official types of documentation, of course, is another great place.

83
00:06:01,090 --> 00:06:04,060
Now, unless you know what you're doing, you can leave the default here.

84
00:06:04,420 --> 00:06:06,970
But there you can set Certa interesting things.

85
00:06:07,450 --> 00:06:14,590
For example, you can add strict mode by setting the SATORU and now typescript will be way more restrictive

86
00:06:14,710 --> 00:06:17,170
regarding what you're allowed to do in your code.

87
00:06:17,770 --> 00:06:23,650
Does can be a pro and can be a con, depending on which kind of code you're writing, how many third

88
00:06:23,650 --> 00:06:25,600
party packages you're using and so on.

89
00:06:25,750 --> 00:06:32,050
It can force you to write cleaner code, but it also sometimes means that you have to find workarounds

90
00:06:32,050 --> 00:06:35,410
to get something to work in typescript, which, you know, will work.

91
00:06:35,620 --> 00:06:38,200
But we're typescript doesn't fully understand your code.

92
00:06:38,860 --> 00:06:45,610
So here you can configure typescript and you have to base configuration file here and then to a specific

93
00:06:45,610 --> 00:06:51,490
configuration files which extend this base configuration file for testing for the testing environment

94
00:06:51,520 --> 00:06:53,770
and for the real app compilation.

95
00:06:54,130 --> 00:06:59,230
And there are some detailed settings can be set for the concrete compilation of the app.

96
00:06:59,950 --> 00:07:05,740
Now, what you'll also see, by the way, is one extra flag, which is not default, typescript, and

97
00:07:05,740 --> 00:07:07,800
that's the angular compiler options.

98
00:07:08,260 --> 00:07:13,810
This is picked up by the angular compiler, which is not the types of compiler, which is the compiler

99
00:07:13,810 --> 00:07:17,830
that kicks in after types compiled your typescript code to JavaScript.

100
00:07:18,160 --> 00:07:22,090
Dangler compiler will then compile your angular application.

101
00:07:22,090 --> 00:07:28,510
So your compile JavaScript code and your HTML template runs on into instructions that can be executed

102
00:07:28,510 --> 00:07:29,440
at runtime.

103
00:07:29,560 --> 00:07:33,940
So instructions to insert buttons and Adam to add event listeners and so on.

104
00:07:34,060 --> 00:07:39,400
So the real DOM instructions that the browser understands, that's what the angular compiler will do.

105
00:07:39,640 --> 00:07:42,040
And you can configure DAT compiler as well.

106
00:07:42,160 --> 00:07:49,740
And unsurprisingly, again, the official docs are a great resource here under def workflow, a Iot

107
00:07:49,780 --> 00:07:52,600
compiler angular compiler options.

108
00:07:52,870 --> 00:07:57,570
You find detailed information about the angular compiler and which options you can set there.

109
00:07:57,820 --> 00:08:03,860
Now, as always, mostly the default will work for you, but you can check out this detailed documentation

110
00:08:03,860 --> 00:08:09,970
here to see whether you need to set some other setting there to build your angular application to where

111
00:08:09,970 --> 00:08:10,450
you want.

112
00:08:11,150 --> 00:08:14,200
And last but not least, we have to Tiercelin Jason file here.

113
00:08:14,440 --> 00:08:20,560
This simply is used for lending, which checks your code quality and basically tells you whether you're

114
00:08:20,560 --> 00:08:22,270
following best practices.

115
00:08:22,270 --> 00:08:24,010
And you wrote your code in a good way.

116
00:08:24,460 --> 00:08:28,000
Does if you get errors here, these are not real errors.

117
00:08:28,360 --> 00:08:34,630
These are just approvement recommendations on how you could improve your code, though, of course,

118
00:08:34,630 --> 00:08:40,990
sometimes there all just is a recommendation which you don't have to follow because not all these recommendations

119
00:08:40,990 --> 00:08:42,280
are best practices.

120
00:08:42,490 --> 00:08:43,600
Some simply are.

121
00:08:43,800 --> 00:08:45,480
Opinions which you don't have to share.

122
00:08:46,100 --> 00:08:50,720
So this is what we have here in terms of configuration files.

123
00:08:51,260 --> 00:08:57,800
Now let's again think about some angular Seelie commands before we dive into that missing configuration

124
00:08:57,800 --> 00:08:59,420
file, Dangler Jason File.

