1
00:00:02,650 --> 00:00:05,330
So were you successful, let's hold it together.

2
00:00:05,860 --> 00:00:09,850
Let's start with the first task creating these components.

3
00:00:10,300 --> 00:00:11,890
I'll use DCI for this.

4
00:00:12,010 --> 00:00:18,880
So with energy GC, I'll trade my game control component with SPAC Falls to not get this testing file.

5
00:00:19,330 --> 00:00:25,870
And then I will repeat this for my art component and then might even component here.

6
00:00:28,130 --> 00:00:35,000
So just like that with dad, we should have free folders with new folders here and now, let's start

7
00:00:35,000 --> 00:00:36,410
in the game control.

8
00:00:36,970 --> 00:00:39,020
I'll keep this relatively simple here.

9
00:00:39,020 --> 00:00:44,960
I will add two buttons where I say start game and also give to some bootstrap classes.

10
00:00:44,960 --> 00:00:45,880
Button, button.

11
00:00:46,430 --> 00:00:48,910
Let's make it button success to have a green button.

12
00:00:49,550 --> 00:00:51,140
And then here I will say.

13
00:00:52,160 --> 00:00:59,030
POS game on the second button, maybe let's make this off type button alert to make it a red button.

14
00:01:00,020 --> 00:01:06,140
But the danger would be the right class, so if Dad, we have the two buttons in game control in component,

15
00:01:06,350 --> 00:01:10,700
these were of course added to app module automatically since we used to seelie these components.

16
00:01:11,060 --> 00:01:14,290
So an app component, I can now add them.

17
00:01:14,930 --> 00:01:21,770
So I will simply do this here in a new div with a new with the real class here and then call X as well

18
00:01:21,980 --> 00:01:23,330
as the width here.

19
00:01:23,340 --> 00:01:25,700
I will add app game control.

20
00:01:26,150 --> 00:01:29,240
Let's have a look at our running application and service already running.

21
00:01:29,480 --> 00:01:30,340
That looks all right.

22
00:01:31,160 --> 00:01:31,970
That is the behavior.

23
00:01:32,050 --> 00:01:35,120
I want the console so that we could see any potential errors.

24
00:01:35,270 --> 00:01:38,570
But that of course looks all right now.

25
00:01:38,570 --> 00:01:41,480
When starting the game, we should emit an event.

26
00:01:41,690 --> 00:01:43,640
So Indy game control component.

27
00:01:43,700 --> 00:01:50,420
First of all, I need to add a click listener to start game and I will start or I will execute on start

28
00:01:50,420 --> 00:01:53,150
game any method name you like here, of course.

29
00:01:53,720 --> 00:01:57,410
And it will added to my component typescript code.

30
00:01:57,890 --> 00:01:59,360
So you're in on start game.

31
00:01:59,360 --> 00:02:05,870
I now want to set this interval and I will stored in property so that I can later access it and clear

32
00:02:05,870 --> 00:02:06,140
it.

33
00:02:06,590 --> 00:02:09,080
So I'll simply name it interval here.

34
00:02:10,870 --> 00:02:18,190
And here and on start game, I will set this interval equal to set interval, as I said, a method supported

35
00:02:18,190 --> 00:02:19,600
by native JavaScript.

36
00:02:20,270 --> 00:02:25,300
And here I want to emit an event every thousand milliseconds, which would be one second.

37
00:02:25,750 --> 00:02:29,260
And then the function here is a six arrow function again.

38
00:02:29,290 --> 00:02:34,360
You could use a normal function, but then you would have to bind this to get the correct reference

39
00:02:34,360 --> 00:02:34,940
to this.

40
00:02:35,380 --> 00:02:38,320
So here I will use a S6 Arrow function.

41
00:02:38,350 --> 00:02:41,130
This is the function which gets executed on each tick.

42
00:02:41,290 --> 00:02:45,050
The function doesn't have any arguments, but here I want to emit an event.

43
00:02:45,340 --> 00:02:47,220
Now this event needs to be created.

44
00:02:47,470 --> 00:02:55,420
So at the top of this file, I'll add another property and I'll simply name interval fired any name

45
00:02:55,420 --> 00:02:55,810
you like.

46
00:02:56,440 --> 00:02:59,800
This will be a new oops new event emitter.

47
00:03:00,010 --> 00:03:05,680
And keep in mind, event emitter needs to be imported from at angular core like that.

48
00:03:06,190 --> 00:03:11,950
Now, this event emitter will in the end only hold a number as a values or why will set the generic

49
00:03:11,950 --> 00:03:14,900
type here of this value of this generic type two number?

50
00:03:15,370 --> 00:03:21,000
Don't forget the parentheses to instantiate this event so that you really get an instance of this object.

51
00:03:21,730 --> 00:03:29,710
And with that, I can now call this interval fired and here emit and I want to emit, well, incrementing

52
00:03:29,710 --> 00:03:30,190
number.

53
00:03:30,370 --> 00:03:33,010
So maybe there are a couple of ways of implementing this.

54
00:03:33,340 --> 00:03:37,720
I will simply store last number here and set this to zero initially.

55
00:03:38,200 --> 00:03:45,100
And then I want to emit last number, this last number plus one.

56
00:03:45,560 --> 00:03:52,210
Therefore the first emitted number will be one, and thereafter I will increment last number so that

57
00:03:52,210 --> 00:03:57,530
I will simply have to keep track of what my last emitted number was.

58
00:03:58,090 --> 00:04:06,640
So if that we should emit incrementing numbers, the next task is, of course, to make this listenable

59
00:04:06,640 --> 00:04:07,780
from outside.

60
00:04:09,220 --> 00:04:17,470
I can do this by adding ad output in front of it with parentheses and output needs to be imported from

61
00:04:17,470 --> 00:04:18,640
at angular court.

62
00:04:18,670 --> 00:04:23,130
Now this event can be caught from outside this component here.

63
00:04:24,160 --> 00:04:28,900
So that is my own event now firing and I should be able to listen to it.

64
00:04:29,110 --> 00:04:33,330
Integral Fired will be the event name since I didn't assign an alias here.

65
00:04:33,940 --> 00:04:37,620
So in the app component, you're on app game control.

66
00:04:38,230 --> 00:04:44,440
We can listen to this interval fired event and maybe execute on interval fired here.

67
00:04:44,680 --> 00:04:49,390
Of course, you can choose a different name right here in on interval fire.

68
00:04:49,390 --> 00:04:52,870
I will implement this method, an app component for now.

69
00:04:52,870 --> 00:04:58,960
I simply want to log the last number so I will pass it on with Tollerson event.

70
00:04:58,960 --> 00:05:03,850
Remember, dollar signing event gives us access to the event data, which is the number in this case.

71
00:05:04,450 --> 00:05:05,440
So an app component.

72
00:05:05,440 --> 00:05:07,480
I know that I will receive my.

73
00:05:08,940 --> 00:05:16,470
Fired number or something like that, which is of type no, so I can simply output this year so that

74
00:05:16,470 --> 00:05:21,690
if I saved this, we should have a working application, we should be able to click this button and

75
00:05:21,690 --> 00:05:26,190
then on the right in the console, we should see incrementing numbers every second.

76
00:05:26,670 --> 00:05:28,070
And that looks pretty good to me.

77
00:05:28,230 --> 00:05:30,290
Paul, this game, of course, won't work for now.

78
00:05:31,080 --> 00:05:35,640
So let's make it work by, well, implementing this post game button.

79
00:05:36,240 --> 00:05:39,090
So you're all at a click listener to the post game button.

80
00:05:39,690 --> 00:05:42,740
And I want to call on Paul's game here, of course.

81
00:05:43,560 --> 00:05:52,980
So let's implement this method and game control component to and here I can simply call clear interval.

82
00:05:54,050 --> 00:05:59,910
And now I need to pass this interval, which was the reference of my interview.

83
00:05:59,930 --> 00:06:00,790
I want to clear.

84
00:06:01,490 --> 00:06:05,870
So if we do this and reload the application, let's start a new timer.

85
00:06:06,740 --> 00:06:12,500
And of course, we don't see any other values because interval is not firing any more.

86
00:06:12,710 --> 00:06:14,450
No new events are emitted.

87
00:06:14,600 --> 00:06:19,630
Of course, if we restart, we continue at free because our last number wasn't overwritten.

88
00:06:19,640 --> 00:06:21,340
You could do this, but I don't want to do that.

89
00:06:21,350 --> 00:06:23,140
I don't want to reset the game state.

90
00:06:23,240 --> 00:06:25,670
I simply want to pause and resume here.

91
00:06:26,900 --> 00:06:33,500
So this is working now, we need to implement the other components odd and even we already got them

92
00:06:33,500 --> 00:06:37,430
here, odd and even and in there and odd here.

93
00:06:37,700 --> 00:06:44,210
I want to output a paragraph, let's say, where I say art dash and then the number which I output via

94
00:06:44,210 --> 00:06:45,410
string interpolation.

95
00:06:46,160 --> 00:06:50,240
Now, of course, number is a property which doesn't exist right now.

96
00:06:50,600 --> 00:06:55,850
So I'll add a property number, which will be type number, but it's not initialized.

97
00:06:56,630 --> 00:06:59,620
Now, again, this should be passed from outside.

98
00:07:00,140 --> 00:07:07,610
So as you learned it, we have to add at input here with parentheses and importing this from add angular

99
00:07:07,610 --> 00:07:08,060
court.

100
00:07:08,480 --> 00:07:13,430
With that, we're now able to pass the data from outside into this component.

101
00:07:14,360 --> 00:07:17,430
So with that number can be set from outside.

102
00:07:18,020 --> 00:07:25,700
So in the app component HTML file, we probably want to add something below our game control here,

103
00:07:26,150 --> 00:07:33,590
maybe a new row, but without the app game control component instead with the app or component here.

104
00:07:34,130 --> 00:07:42,290
And we will use energy for to replicate this though we don't have an array right now, we have to create

105
00:07:42,290 --> 00:07:45,710
this array in the app component typescript file.

106
00:07:45,720 --> 00:07:48,170
Right now we're logging any fired number.

107
00:07:48,560 --> 00:07:55,760
What we should do something else we should have an array of numbers would be a fitting name and odd

108
00:07:55,760 --> 00:08:00,920
numbers is simply an empty array at the beginning, but can even be clear about which type it will hold.

109
00:08:01,400 --> 00:08:07,100
The type will simply be an array of numbers that would be type definition.

110
00:08:08,350 --> 00:08:14,710
Now, I'm going to duplicate this because we're also going to have even numbers now in on Intervale

111
00:08:14,710 --> 00:08:22,090
Fired, I want to check if the fired number, if it is odd or even now we can check those with modulus

112
00:08:22,090 --> 00:08:25,600
operator if fired number.

113
00:08:25,900 --> 00:08:30,370
And the percentage sign is demarches operator divided by two.

114
00:08:31,320 --> 00:08:32,850
If what remains here.

115
00:08:34,050 --> 00:08:36,750
Whoops, here equals zero.

116
00:08:37,350 --> 00:08:43,260
Well, then we know it's even so, then we should use our even numbers and pushed and you fired a number

117
00:08:43,260 --> 00:08:43,770
on it.

118
00:08:44,730 --> 00:08:51,510
Otherwise, we know there is something left over from this division, so it is an odd number, so it

119
00:08:51,510 --> 00:08:54,520
pushes you, we should push it to odd numbers.

120
00:08:55,530 --> 00:09:01,650
So now we're managing these arrays and with odd numbers, getting items which are odd numbers, which

121
00:09:01,650 --> 00:09:07,350
are odd in up component here in NJ for I can now loop through them.

122
00:09:07,350 --> 00:09:10,410
So odd number of odd numbers.

123
00:09:10,410 --> 00:09:18,870
So looping through this array, I can now pass this to my art component because remember there we exposed

124
00:09:18,870 --> 00:09:25,230
the no input here so I can point to number.

125
00:09:25,230 --> 00:09:29,160
You could of course also choose a different name or assign an alias as you learned it.

126
00:09:29,610 --> 00:09:32,080
And I want to pass my odd number there.

127
00:09:32,220 --> 00:09:36,720
So the number I'm currently at in this iteration, let's try this.

128
00:09:36,720 --> 00:09:42,930
We don't have even numbers yet, but let's see if our numbers work, if we start the game.

129
00:09:44,000 --> 00:09:48,780
We indeed scored one, three, five and so on.

130
00:09:49,370 --> 00:09:52,270
So this is working, this is working as expected.

131
00:09:52,280 --> 00:09:54,480
If we pause, we shouldn't see any other numbers.

132
00:09:54,890 --> 00:10:02,870
Now, let's do the same for even so, for even, I will basically just copy the template code from the

133
00:10:02,870 --> 00:10:09,950
art component, replace even odd with even, of course, and well, here in the even component itself,

134
00:10:09,950 --> 00:10:16,730
at a time file, I will all receive a number which will you have type number and where I have to add

135
00:10:16,730 --> 00:10:22,280
at input with parentheses to make it bendable from outside.

136
00:10:23,030 --> 00:10:28,910
So now just like with on the art component, I can do the same with the even component and bind no from

137
00:10:28,910 --> 00:10:34,070
my parent component, which in this case is the app component HTML5 excuse me, or the app component

138
00:10:34,070 --> 00:10:34,700
in general.

139
00:10:35,660 --> 00:10:40,220
So I'm going to duplicate app art and replace it with app even.

140
00:10:40,640 --> 00:10:44,930
Of course here I want to loop through my even number, so even numbers.

141
00:10:44,930 --> 00:10:50,960
So I'll store it in a temporary variable named even number of even numbers.

142
00:10:51,270 --> 00:10:53,150
Let's pass to even number here.

143
00:10:53,690 --> 00:10:58,910
And with that we should now lock both with art and even in front of it.

144
00:10:59,390 --> 00:11:02,030
Let's see if it reloads and I click start game.

145
00:11:02,060 --> 00:11:10,360
Odd, even odd and even and the behavior you see here that is kind of is below each other.

146
00:11:10,820 --> 00:11:16,880
Well, that simply happens because that is how we placed on an even odd numbers will always be sorted

147
00:11:16,880 --> 00:11:17,810
to the top here.

148
00:11:17,930 --> 00:11:22,040
You would have to manage all in one component to have them alternate.

149
00:11:22,310 --> 00:11:24,790
But that is exactly behavior I want here in this case.

150
00:11:24,890 --> 00:11:30,890
So this structuring where we first have all the odd and that the even numbers with that, the remaining

151
00:11:30,890 --> 00:11:32,710
pieces to change the styling.

152
00:11:33,290 --> 00:11:36,110
Now both templates look pretty much the same.

153
00:11:36,330 --> 00:11:38,080
We have a paragraph in both of them.

154
00:11:38,720 --> 00:11:45,380
So for all the why don't we start this paragraph to be blue, have a blue color, blue text color,

155
00:11:45,770 --> 00:11:49,280
and for even maybe we could choose green.

156
00:11:50,330 --> 00:11:56,270
And since we use style encapsulation here, even though we use the paragraph selector in both cases,

157
00:11:56,690 --> 00:12:01,000
each component will only receive the style set up in the respective stylesheet.

158
00:12:01,580 --> 00:12:06,860
So if we do this and start the game one more time, we see all this blue and even as green.

159
00:12:07,130 --> 00:12:12,830
So style encapsulation is also working fine here and you really see the difference.

160
00:12:13,340 --> 00:12:14,600
So that was our assignment.

161
00:12:14,630 --> 00:12:15,640
I hope you enjoyed it.

162
00:12:16,040 --> 00:12:19,160
And with that, let's move on and dive deeper into components.

