1
00:00:02,478 --> 00:00:03,860
Now, I wanna take a brief look

2
00:00:03,860 --> 00:00:06,670
at services with Standalone Components.

3
00:00:06,670 --> 00:00:08,860
I do have one service in this demo app

4
00:00:08,860 --> 00:00:12,230
and it is a service as you would always define it.

5
00:00:12,230 --> 00:00:15,300
It's a class decorated with @Injectable

6
00:00:15,300 --> 00:00:16,830
where I provide an object

7
00:00:16,830 --> 00:00:19,970
with the providedIn property set to root.

8
00:00:19,970 --> 00:00:21,240
This, in the end, makes sure

9
00:00:21,240 --> 00:00:25,030
that this service is provided to all components

10
00:00:25,030 --> 00:00:26,240
of your application,

11
00:00:26,240 --> 00:00:30,160
all your components and directives can inject this service

12
00:00:30,160 --> 00:00:32,790
and all those components and directives

13
00:00:32,790 --> 00:00:36,473
will operate on the same object based on that service.

14
00:00:37,620 --> 00:00:40,940
Now, this works just fine with Standalone Components

15
00:00:40,940 --> 00:00:42,220
as you can clearly tell

16
00:00:42,220 --> 00:00:45,010
because no adjustments were needed here.

17
00:00:45,010 --> 00:00:46,470
However, you might recall

18
00:00:46,470 --> 00:00:49,970
that this is not the only way of providing services.

19
00:00:49,970 --> 00:00:51,280
Instead of doing it like this,

20
00:00:51,280 --> 00:00:53,850
which is the recommended way typically though,

21
00:00:53,850 --> 00:00:56,550
you could have also added this service

22
00:00:56,550 --> 00:00:59,560
to the providers array of a module.

23
00:00:59,560 --> 00:01:01,240
And that would have been fine as well

24
00:01:01,240 --> 00:01:03,950
and it would have also made that service available

25
00:01:03,950 --> 00:01:06,620
to all components and directives,

26
00:01:06,620 --> 00:01:09,100
and it would have made available a single object

27
00:01:09,100 --> 00:01:10,700
of that service.

28
00:01:10,700 --> 00:01:11,850
What you can also do

29
00:01:11,850 --> 00:01:15,470
and what you could do before Standalone Components as well

30
00:01:15,470 --> 00:01:17,200
is you can go to a component

31
00:01:17,200 --> 00:01:19,470
and add the providers property

32
00:01:19,470 --> 00:01:22,330
to this component's decorator object.

33
00:01:22,330 --> 00:01:24,120
And again, this is not new.

34
00:01:24,120 --> 00:01:27,180
You could do this with Angular 2 already.

35
00:01:27,180 --> 00:01:32,180
And then you can also add your AnalyticsService here.

36
00:01:32,200 --> 00:01:34,100
Add a import to the file

37
00:01:34,100 --> 00:01:35,970
and then point at the class here.

38
00:01:35,970 --> 00:01:38,260
And if you save this, you will notice

39
00:01:38,260 --> 00:01:40,923
that this still works as before.

40
00:01:41,900 --> 00:01:44,890
So that's another way of providing services.

41
00:01:44,890 --> 00:01:47,680
Now, the difference is that if you add a service

42
00:01:47,680 --> 00:01:49,006
to a component like this,

43
00:01:49,006 --> 00:01:52,530
every component gets its own object.

44
00:01:52,530 --> 00:01:56,120
So if you use the same service for multiple instances

45
00:01:56,120 --> 00:01:58,590
of a component, you get multiple instances

46
00:01:58,590 --> 00:01:59,780
of that service as well,

47
00:01:59,780 --> 00:02:02,570
and there is no shared state.

48
00:02:02,570 --> 00:02:04,823
Sometime that's needed, often it's not.

49
00:02:04,823 --> 00:02:07,200
Therefore, you rarely do that.

50
00:02:07,200 --> 00:02:09,160
This behavior is not new though.

51
00:02:09,160 --> 00:02:10,620
It always worked like this.

52
00:02:10,620 --> 00:02:12,070
I just wanted to mention again

53
00:02:12,070 --> 00:02:13,620
that you can still use it,

54
00:02:13,620 --> 00:02:16,423
even if you are using Standalone Components.

55
00:02:17,530 --> 00:02:19,420
Now, if still, for whatever reason,

56
00:02:19,420 --> 00:02:22,160
you don't wanna provide a service globally

57
00:02:22,160 --> 00:02:24,390
by adding providedIn here,

58
00:02:24,390 --> 00:02:28,110
you can also bring back the old feature

59
00:02:28,110 --> 00:02:31,470
of adding it to a providers array.

60
00:02:31,470 --> 00:02:33,840
Previously, you added the NgModule

61
00:02:33,840 --> 00:02:35,300
with a providers object,

62
00:02:35,300 --> 00:02:37,340
which was an array of services.

63
00:02:37,340 --> 00:02:40,840
Now in such a application that doesn't have modules,

64
00:02:40,840 --> 00:02:43,600
you can go to the bootstrapApplication function here

65
00:02:43,600 --> 00:02:45,700
and add a second object,

66
00:02:45,700 --> 00:02:49,170
which allows you to provide some configuration.

67
00:02:49,170 --> 00:02:52,250
At the moment, there's only one property you can set though

68
00:02:52,250 --> 00:02:54,900
and that's the providers property.

69
00:02:54,900 --> 00:02:57,830
And here you can do exactly what you would imagine.

70
00:02:57,830 --> 00:03:01,750
You can add your globally provided services here as well.

71
00:03:01,750 --> 00:03:05,540
So here I can also add my AnalyticsService like this.

72
00:03:05,540 --> 00:03:09,000
Add a import to the file, add the class here,

73
00:03:09,000 --> 00:03:10,910
make sure you don't have providers

74
00:03:10,910 --> 00:03:12,870
in the DetailsComponent anymore

75
00:03:12,870 --> 00:03:16,190
and still with this kind of code,

76
00:03:16,190 --> 00:03:18,820
you will see that if I open this,

77
00:03:18,820 --> 00:03:20,593
my service still works.

78
00:03:21,860 --> 00:03:23,680
So this is the equivalent

79
00:03:23,680 --> 00:03:27,110
of having a providers array in a NgModule.

80
00:03:27,110 --> 00:03:29,620
If you wanna provide some service globally,

81
00:03:29,620 --> 00:03:32,490
you can add it here with this second argument

82
00:03:32,490 --> 00:03:34,573
that's passed to BootstrapApplication.

83
00:03:35,460 --> 00:03:38,130
Now, here this is really not needed.

84
00:03:38,130 --> 00:03:40,960
Therefore, I'll comment this out actually.

85
00:03:40,960 --> 00:03:43,210
You could do this but it's not needed

86
00:03:43,210 --> 00:03:46,210
because here the best way of providing this service

87
00:03:46,210 --> 00:03:49,500
is to add this providedIn syntax.

88
00:03:49,500 --> 00:03:51,440
Still, I wanted to mention it

89
00:03:51,440 --> 00:03:53,250
because it is important to understand

90
00:03:53,250 --> 00:03:55,100
how you can work with services

91
00:03:55,100 --> 00:03:56,873
and Standalone Components.

