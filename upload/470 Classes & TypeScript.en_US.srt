1
00:00:02,250 --> 00:00:04,610
Now, I got one last feature,

2
00:00:04,610 --> 00:00:06,960
which I also wanna cover here.

3
00:00:06,960 --> 00:00:11,960
And that would be classes and interfaces with TypeScript.

4
00:00:12,390 --> 00:00:16,800
And we know classes from modern JavaScript already.

5
00:00:16,800 --> 00:00:19,660
You can define blueprints for objects,

6
00:00:19,660 --> 00:00:21,500
with help of the class keyword.

7
00:00:21,500 --> 00:00:25,270
And again, this is a keyword supported in TypeScript

8
00:00:25,270 --> 00:00:29,230
but it is actually also supported in modern JavaScript.

9
00:00:29,230 --> 00:00:31,410
Now with classes, as I just said,

10
00:00:31,410 --> 00:00:34,600
you can define blueprints for objects,

11
00:00:34,600 --> 00:00:37,330
which you plan on instantiating.

12
00:00:37,330 --> 00:00:41,620
For example, here I could create a person class,

13
00:00:41,620 --> 00:00:44,100
or let's maybe create a student class,

14
00:00:44,100 --> 00:00:48,943
and then you can add properties and methods to that class.

15
00:00:49,950 --> 00:00:51,070
So for example here,

16
00:00:51,070 --> 00:00:53,650
we could say that every student

17
00:00:53,650 --> 00:00:56,440
should have a first name property,

18
00:00:56,440 --> 00:01:00,170
and we can assign types to these properties to make it clear

19
00:01:00,170 --> 00:01:04,440
that this first name property here should be a string.

20
00:01:04,440 --> 00:01:07,780
And then we may also have a last name which is a string,

21
00:01:07,780 --> 00:01:12,780
maybe an age, which is a number, and may be a courses array,

22
00:01:13,110 --> 00:01:15,123
which is an array of strings.

23
00:01:16,090 --> 00:01:19,023
Now, with that, we define such a blueprint.

24
00:01:19,890 --> 00:01:23,010
Now we can also add a constructor function,

25
00:01:23,010 --> 00:01:25,990
a constructor method, to this class

26
00:01:25,990 --> 00:01:29,300
to then define the default method that will be called,

27
00:01:29,300 --> 00:01:34,300
when we instantiate a new object based on that plus here.

28
00:01:34,760 --> 00:01:37,770
And here, we could accept certain arguments

29
00:01:37,770 --> 00:01:42,170
like first which is a string, last which is a string,

30
00:01:42,170 --> 00:01:43,750
age which is a number,

31
00:01:43,750 --> 00:01:46,640
and courses which is an array of strings.

32
00:01:46,640 --> 00:01:49,680
And you see that I have the same argument names

33
00:01:49,680 --> 00:01:52,640
as I have properties and therefore we could then

34
00:01:52,640 --> 00:01:55,010
set first name equal to first,

35
00:01:55,010 --> 00:01:59,340
this last name equal to last, this age equal to age,

36
00:01:59,340 --> 00:02:02,703
and this course is equal to courses.

37
00:02:03,820 --> 00:02:05,010
Like this.

38
00:02:05,010 --> 00:02:08,920
And if we do that, we can define a new student down there

39
00:02:08,920 --> 00:02:12,740
by instantiating this student class like this.

40
00:02:12,740 --> 00:02:17,050
And then we can pass in these values for our parameters

41
00:02:17,050 --> 00:02:19,340
to this constructor function.

42
00:02:19,340 --> 00:02:21,450
By the way, of course your class

43
00:02:21,450 --> 00:02:25,010
doesn't have to take any arguments in the constructor.

44
00:02:25,010 --> 00:02:29,540
You could also set those properties in a different way,

45
00:02:29,540 --> 00:02:32,170
for example, by assigning default values

46
00:02:32,170 --> 00:02:36,083
or after you created an object with the dot notation.

47
00:02:37,040 --> 00:02:40,710
But here I'll then pass in my values for these different

48
00:02:40,710 --> 00:02:41,740
arguments

49
00:02:45,160 --> 00:02:46,600
like this.

50
00:02:46,600 --> 00:02:50,120
And with that, we create such a new object.

51
00:02:50,120 --> 00:02:53,000
And on this student we can now use the dot notation

52
00:02:53,000 --> 00:02:55,140
to access the different properties.

53
00:02:55,140 --> 00:02:59,030
And if we had any methods besides the constructor function,

54
00:02:59,030 --> 00:03:01,790
we could call those methods as well.

55
00:03:01,790 --> 00:03:04,770
And speaking off that, we can add a method here.

56
00:03:04,770 --> 00:03:06,790
Let's say the enrol method,

57
00:03:06,790 --> 00:03:11,340
which allows us to enroll this student into a new course.

58
00:03:11,340 --> 00:03:13,170
And therefore we could accept

59
00:03:13,170 --> 00:03:15,770
the course name as argument here,

60
00:03:15,770 --> 00:03:18,980
and then add it to courses,

61
00:03:18,980 --> 00:03:20,220
like this.

62
00:03:20,220 --> 00:03:24,210
And that's how you add a method to such a class.

63
00:03:24,210 --> 00:03:27,910
This is the method shorthand notation.

64
00:03:27,910 --> 00:03:31,540
You have the method name, then your parameter list,

65
00:03:31,540 --> 00:03:35,190
and then the function body, so it's basically defined

66
00:03:35,190 --> 00:03:37,760
like a regular JavaScript function,

67
00:03:37,760 --> 00:03:40,740
with the important difference that we don't have

68
00:03:40,740 --> 00:03:42,280
the function keyword.

69
00:03:42,280 --> 00:03:43,677
We don't have that.

70
00:03:43,677 --> 00:03:46,420
And that then is how we add a method.

71
00:03:46,420 --> 00:03:48,780
And now we could call this method here,

72
00:03:48,780 --> 00:03:51,860
and call enrol and pass in React

73
00:03:51,860 --> 00:03:55,220
as another course this student is enrolled in,

74
00:03:55,220 --> 00:03:58,840
and thereafter if you would access student.courses,

75
00:03:58,840 --> 00:04:03,563
this would include both Angular and React.

76
00:04:05,230 --> 00:04:07,730
That's how we can define a class.

77
00:04:07,730 --> 00:04:11,210
Now, the special thing about TypeScript and classes

78
00:04:11,210 --> 00:04:14,260
is that we can define all the properties

79
00:04:14,260 --> 00:04:16,520
this class will have in advance

80
00:04:16,520 --> 00:04:19,970
and sets the types for these different properties.

81
00:04:19,970 --> 00:04:23,570
In standard JavaScript, we would not do that.

82
00:04:23,570 --> 00:04:26,340
We would not have these property assignments.

83
00:04:26,340 --> 00:04:28,740
Instead properties would be added

84
00:04:28,740 --> 00:04:31,590
by just setting them inside of the constructor.

85
00:04:31,590 --> 00:04:34,650
With TypeScript, you can define them ahead of time,

86
00:04:34,650 --> 00:04:36,470
including their types.

87
00:04:36,470 --> 00:04:39,990
And also very important, with TypeScript

88
00:04:39,990 --> 00:04:43,960
you can control whether a property or a method

89
00:04:43,960 --> 00:04:48,960
should be publicly accessible, or if it should be private.

90
00:04:49,060 --> 00:04:53,000
Now, private properties and methods can only be used from

91
00:04:53,000 --> 00:04:56,460
inside this class.

92
00:04:56,460 --> 00:05:00,940
Public methods and properties can be accessed from outside

93
00:05:00,940 --> 00:05:03,370
through this dot notation.

94
00:05:03,370 --> 00:05:06,240
And therefore as you can tell by default,

95
00:05:06,240 --> 00:05:09,020
all these properties and methods are public,

96
00:05:09,020 --> 00:05:11,853
because by default I can access them all.

97
00:05:12,830 --> 00:05:16,880
But we could say that courses should be private

98
00:05:16,880 --> 00:05:19,230
by adding the private keyword

99
00:05:19,230 --> 00:05:21,603
in front of this property definition.

100
00:05:22,620 --> 00:05:25,070
And then we could of course add another method.

101
00:05:25,070 --> 00:05:29,480
Let's say listCourses, and there we then return

102
00:05:29,480 --> 00:05:31,740
this.courses.

103
00:05:31,740 --> 00:05:33,560
Now this might be a bit redundant,

104
00:05:33,560 --> 00:05:36,700
we don't really gain a lot by doing it like this.

105
00:05:36,700 --> 00:05:39,350
We gain a bit more if we called slice,

106
00:05:39,350 --> 00:05:42,380
because then at least we return a copy of courses

107
00:05:42,380 --> 00:05:46,170
and make sure that if someone would push a new element

108
00:05:46,170 --> 00:05:49,107
onto this array from outside this class,

109
00:05:49,107 --> 00:05:51,550
the original array inside of the class

110
00:05:51,550 --> 00:05:54,010
would not be altered, but in general

111
00:05:54,010 --> 00:05:55,763
this is just an example.

112
00:05:56,900 --> 00:05:59,320
Now with those adjustments made

113
00:05:59,320 --> 00:06:02,470
I can't access student.courses here,

114
00:06:02,470 --> 00:06:03,870
I get an error.

115
00:06:03,870 --> 00:06:05,930
Instead I can call listCourses

116
00:06:05,930 --> 00:06:10,510
if I wanna see all the courses this student is enrolled in.

117
00:06:10,510 --> 00:06:14,560
And that stands simply another TypeScript feature

118
00:06:14,560 --> 00:06:18,450
which you will also see in action for all of this course.

119
00:06:18,450 --> 00:06:20,340
Now it's also worth pointing out

120
00:06:20,340 --> 00:06:23,560
that it's a very common pattern in TypeScript

121
00:06:23,560 --> 00:06:26,700
that you would define properties like this,

122
00:06:26,700 --> 00:06:30,410
and you then assign values to those properties

123
00:06:30,410 --> 00:06:31,950
through the constructor.

124
00:06:31,950 --> 00:06:35,690
You don't necessarily do it in all the classes you create,

125
00:06:35,690 --> 00:06:38,700
especially with Angular, you will see a lot of classes

126
00:06:38,700 --> 00:06:39,850
where you don't do it,

127
00:06:39,850 --> 00:06:43,060
but it's definitely also not uncommon.

128
00:06:43,060 --> 00:06:44,860
And because it's so common

129
00:06:44,860 --> 00:06:47,270
to assign values to those properties

130
00:06:47,270 --> 00:06:48,750
which you defined before,

131
00:06:48,750 --> 00:06:51,860
you can do it in one step with TypeScript.

132
00:06:51,860 --> 00:06:54,630
Instead of defining your properties here

133
00:06:54,630 --> 00:06:59,030
you can add these modifier, these accessor keywords

134
00:06:59,030 --> 00:07:02,830
in front of your parameters in the constructor method,

135
00:07:02,830 --> 00:07:06,310
and add public in front of all the parameters

136
00:07:06,310 --> 00:07:10,430
that should be set up as public properties,

137
00:07:10,430 --> 00:07:13,260
and add private in front of all the parameters

138
00:07:13,260 --> 00:07:16,840
that should be set up as private properties.

139
00:07:16,840 --> 00:07:20,370
Then, you don't assign values like this.

140
00:07:20,370 --> 00:07:24,930
And I'll now change this to first name and last name here,

141
00:07:24,930 --> 00:07:27,830
auto format this, and now this in the end

142
00:07:27,830 --> 00:07:30,500
leads to the same result as we had it before.

143
00:07:30,500 --> 00:07:32,690
So this is a shorthand notation

144
00:07:32,690 --> 00:07:36,740
for defining certain properties of this class

145
00:07:36,740 --> 00:07:40,440
and their types, and for also letting the user

146
00:07:40,440 --> 00:07:43,220
assign values to those properties

147
00:07:43,220 --> 00:07:45,910
when that class is instantiated.

148
00:07:45,910 --> 00:07:48,110
So this code down there still works,

149
00:07:48,110 --> 00:07:51,160
but now with that shorthand notation.

150
00:07:51,160 --> 00:07:53,890
And that's this classes feature,

151
00:07:53,890 --> 00:07:56,483
which is also part of TypeScript.

