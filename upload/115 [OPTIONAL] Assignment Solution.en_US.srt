1
00:00:02,180 --> 00:00:05,090
So were you successful, here's my solution.

2
00:00:05,530 --> 00:00:14,210
Our creators, users service as we are asked to and in there we, of course export a class to users

3
00:00:14,210 --> 00:00:15,010
service.

4
00:00:15,500 --> 00:00:20,510
We don't need to add at injectable right now because right now we're not injecting a service in there

5
00:00:21,170 --> 00:00:21,560
and here.

6
00:00:21,560 --> 00:00:23,140
And I want to manage my users.

7
00:00:23,630 --> 00:00:30,800
No, you could create one area of users and their store objects, which for each object, it also tracks

8
00:00:30,800 --> 00:00:32,170
the state of the user.

9
00:00:32,600 --> 00:00:38,810
I would go with two areas, so I will have my act for my inactive users to to erase from the app component.

10
00:00:39,440 --> 00:00:43,040
So I'll copy it from there and paste it into my user's service.

11
00:00:43,040 --> 00:00:48,920
But again, as an improvement, you could store objects in one single area there, which then allows

12
00:00:48,920 --> 00:00:51,770
you to switch to status for each object, for each user.

13
00:00:52,730 --> 00:00:53,810
So this is this.

14
00:00:54,470 --> 00:00:59,330
And then I want to add a set to active method here.

15
00:00:59,360 --> 00:01:06,080
I expect to get the idea of the elements should switch and are set to enact the method in here.

16
00:01:06,090 --> 00:01:11,060
Of course, also, you could optimize this by having one method which does Bovon, which receives an

17
00:01:11,060 --> 00:01:16,100
additional argument, which determines whether you want to switch active to inactive or the other way

18
00:01:16,100 --> 00:01:16,580
around.

19
00:01:17,570 --> 00:01:24,710
Well, in set to active, I want to reach out to my active users and push a new element to them.

20
00:01:25,340 --> 00:01:31,970
That new element is in my inactive users, the user with the idea of receiving there and thereafter

21
00:01:31,970 --> 00:01:37,630
I can simply splice that user splice will simply remove this one element in this case here.

22
00:01:38,480 --> 00:01:46,760
Well, now I can copy that code pasted in here and reverse it, push it to the inactive users from the

23
00:01:46,760 --> 00:01:49,730
active users and splice it from the active users.

24
00:01:50,270 --> 00:01:55,760
Now this service is prepared and now in my app component, I can get rid of these two methods.

25
00:01:56,330 --> 00:02:03,500
I also can delete my users here so we can completely clean this component and we can clean everything

26
00:02:03,500 --> 00:02:05,110
in the template of the app component.

27
00:02:05,150 --> 00:02:11,090
We don't need to parse the properties to our components there because these components can reach out

28
00:02:11,090 --> 00:02:12,780
to the service on their own.

29
00:02:13,740 --> 00:02:18,440
Now it is important to make sure that we provide the service on the right level.

30
00:02:18,920 --> 00:02:24,470
If we were provided in the inactive user component and the active user component, we would have two

31
00:02:24,470 --> 00:02:28,310
different instances of that service and therefore it would not work.

32
00:02:28,310 --> 00:02:31,250
We could not switch because we would work with two different arrays.

33
00:02:32,150 --> 00:02:35,440
So with four different arrays actually.

34
00:02:35,750 --> 00:02:38,390
So therefore, this is not the right place to provide it.

35
00:02:38,780 --> 00:02:42,440
We could provide it here in the app component or in the app module.

36
00:02:42,560 --> 00:02:47,990
Now, since we don't plan on injecting this service in another service or something like this, there

37
00:02:47,990 --> 00:02:49,310
is no reason to provide it.

38
00:02:49,310 --> 00:02:50,660
Application wide, though.

39
00:02:50,660 --> 00:02:51,440
You could do that.

40
00:02:51,440 --> 00:02:52,280
That's not wrong.

41
00:02:52,280 --> 00:02:56,420
Not bad, but I will simply provided here in the app component.

42
00:02:56,420 --> 00:03:01,160
But again, just to highlight this, it's not bad or wrong to provide it in the app module.

43
00:03:01,820 --> 00:03:10,400
So here I will provide my users service, make sure to also add the import with that provided on this

44
00:03:10,400 --> 00:03:16,250
level, active users and inactive users will actually share the same service, the same instance of

45
00:03:16,250 --> 00:03:16,910
that service.

46
00:03:17,840 --> 00:03:25,100
So now I can go to inactive users, add a constructor here and get my users service here.

47
00:03:25,460 --> 00:03:27,890
So of type users service, of course.

48
00:03:27,890 --> 00:03:30,230
User service is your name actually.

49
00:03:32,080 --> 00:03:37,450
Make sure to add the import here, too, you always need to add this, that's a typescript feature not

50
00:03:37,450 --> 00:03:42,060
related to ANGULAR, and then I can remove the input here.

51
00:03:42,070 --> 00:03:44,160
We're not receiving it from outside anymore.

52
00:03:44,200 --> 00:03:51,880
I can remove my whole output, my whole event here, and also remove this very limited remove all these

53
00:03:51,880 --> 00:03:52,360
imports.

54
00:03:52,360 --> 00:03:53,130
They're for it.

55
00:03:53,800 --> 00:03:56,560
And now I want to initialize my user's array.

56
00:03:57,070 --> 00:04:02,160
I will do it and on in it as again, it is a good practice to do initialization work in there.

57
00:04:02,380 --> 00:04:08,500
So let's implement on init make sure to import it and then we need to add the energy on init method.

58
00:04:08,800 --> 00:04:16,060
And then there I can set my users equal to the users I fetch from my user service and we're in the inactive

59
00:04:16,060 --> 00:04:19,360
component here, so I should get my inactive users.

60
00:04:20,380 --> 00:04:27,280
Now with that I can simply copy that code over to the active users, replace my input and my output

61
00:04:27,280 --> 00:04:33,790
here too, and remove the input string, remove all these imports, but on the other hand, make sure

62
00:04:33,790 --> 00:04:37,360
to import user service and implement on in it.

63
00:04:37,370 --> 00:04:43,060
So just like any other component, make sure to import on in it too and import the servers.

64
00:04:44,550 --> 00:04:47,410
And here we don't have to admit this event anymore.

65
00:04:47,790 --> 00:04:53,070
Instead, make sure that now users is not the inactive users, but the active users somewhere in the

66
00:04:53,070 --> 00:04:54,560
active users component.

67
00:04:55,440 --> 00:05:02,640
And if we click on Set to Inactive, I want to reach out to the user service and call set to inactive

68
00:05:02,640 --> 00:05:04,460
and pass on this ID.

69
00:05:04,920 --> 00:05:08,340
And on the other hand, in the inactive service, I want to do the same.

70
00:05:08,700 --> 00:05:15,630
Reach out to the users service and your call set to active and pass the ID.

71
00:05:16,500 --> 00:05:17,670
That should be all.

72
00:05:17,750 --> 00:05:21,840
Let's see if this works, if our app here is loaded.

73
00:05:23,000 --> 00:05:29,840
I can still switch my users around, so does the first part does work, but boy, is it leaner, much

74
00:05:29,840 --> 00:05:33,720
less passing around, instead having a clean central service.

75
00:05:34,550 --> 00:05:38,230
Now, the other part of the task was to add discounters service.

76
00:05:38,510 --> 00:05:42,950
So let's add this to the counter service statistics file.

77
00:05:43,700 --> 00:05:48,020
Let's export a class here, the counter service like this.

78
00:05:48,770 --> 00:05:55,790
And here I simply want to manage my active to inactive calendar, which starts at zero.

79
00:05:56,210 --> 00:06:01,070
And while you guessed it inactive to active calendar, which also starts at zero.

80
00:06:01,850 --> 00:06:06,140
And now I simply want to add two methods.

81
00:06:07,290 --> 00:06:15,270
Where I say incremented active to inactive, of course, you can choose another name, and here I will

82
00:06:15,270 --> 00:06:22,740
simply say active to inactive counter plus plus and Lockton you counter so the active to inactive counter.

83
00:06:23,850 --> 00:06:32,490
And then I will just duplicate this to also have my inactive to active counter where I increase the

84
00:06:32,490 --> 00:06:38,350
inactive to active counter property and lock the inactive to active counter property.

85
00:06:38,460 --> 00:06:46,110
You probably dream about inactive too active tonight, but this is our counter service now here you

86
00:06:46,110 --> 00:06:52,710
could add it in multiple places, you could add it here in the onset to active or the onset to inactive

87
00:06:52,710 --> 00:06:53,130
methods.

88
00:06:53,310 --> 00:06:54,360
That would be all right.

89
00:06:54,900 --> 00:06:57,810
But I want to add it here in my user service.

90
00:06:58,560 --> 00:07:00,840
So I want to inject that into a service.

91
00:07:01,050 --> 00:07:03,660
And for this, we have to take two things into account.

92
00:07:04,080 --> 00:07:10,740
First of all, we have to make sure that we provide the counter service here in the app module.

93
00:07:10,890 --> 00:07:18,450
So counter service, make sure to at the airport here to now it's available application wide and therefore

94
00:07:18,450 --> 00:07:25,230
can also be injected into our services segment to inject a service into a service.

95
00:07:25,260 --> 00:07:26,310
What would you need to do?

96
00:07:27,520 --> 00:07:31,390
You need to add at injectable to the service.

97
00:07:32,330 --> 00:07:39,260
Where you want to inject that in, right, so to the users service here, not to counter service to

98
00:07:39,260 --> 00:07:42,240
users, service to the receiving service.

99
00:07:42,860 --> 00:07:47,530
So here I will add at injectable, don't forget the parentheses.

100
00:07:47,540 --> 00:07:50,310
That's a common mistake and deport.

101
00:07:51,170 --> 00:07:57,560
And with that, I can now inject the counter service in the users service.

102
00:07:57,920 --> 00:07:59,540
So here counter.

103
00:08:00,710 --> 00:08:07,520
Lips counter, a service of type counter service, make sure to import this type here at the top to.

104
00:08:08,810 --> 00:08:15,530
And with that and check that here in set to act, if I can call this counter service, and since we

105
00:08:15,530 --> 00:08:22,790
said something to active, I want to call the increment inactive to active because we set something

106
00:08:22,790 --> 00:08:24,740
from inactive to active.

107
00:08:26,040 --> 00:08:29,070
And on the other hand, and is set to inactive.

108
00:08:29,280 --> 00:08:34,550
I want to incremented well, active to inactive.

109
00:08:34,770 --> 00:08:35,880
So this one here.

110
00:08:37,610 --> 00:08:44,540
With that, if we now safeties and let our app reload and I click to Set to inactive, we see that as

111
00:08:44,540 --> 00:08:48,200
one, maybe improve the output here that we say.

112
00:08:50,080 --> 00:08:57,040
Active to inactive, and then we output the number and on the other hand, down here.

113
00:08:58,070 --> 00:08:58,730
We have.

114
00:09:00,570 --> 00:09:02,790
Inactive, too active.

115
00:09:04,020 --> 00:09:06,000
So now let's just reload.

116
00:09:06,910 --> 00:09:13,810
Active to inactive one, two, and now we should add forward to the inactive to active side and some

117
00:09:13,810 --> 00:09:15,920
to the active to inactive.

118
00:09:15,940 --> 00:09:17,020
So this is working.

119
00:09:17,440 --> 00:09:19,390
Everything seems to work as intended.

120
00:09:19,420 --> 00:09:20,690
This is my solution.

121
00:09:20,710 --> 00:09:22,480
Of course, you might have a different solution.

122
00:09:22,480 --> 00:09:24,970
There are different ways of achieving the same.

123
00:09:25,390 --> 00:09:28,940
Overall, you should feel confident using services now.

124
00:09:28,990 --> 00:09:33,550
You should see their benefits and how you might use them in your next project.

125
00:09:33,820 --> 00:09:34,690
Let's move on.

