1
00:00:02,066 --> 00:00:03,366
- [Lecturer] Now, there are a lot of

2
00:00:03,366 --> 00:00:05,900
other core TypeScript features

3
00:00:05,900 --> 00:00:08,133
which I do explore in greater detail

4
00:00:08,133 --> 00:00:10,033
in my TypeScript course.

5
00:00:10,033 --> 00:00:13,200
To come to an end here
for this introduction,

6
00:00:13,200 --> 00:00:16,600
there are just two last features

7
00:00:16,600 --> 00:00:18,166
which I wanna cover here.

8
00:00:18,166 --> 00:00:21,866
And that would be functions
combined with types,

9
00:00:21,866 --> 00:00:25,166
and then thereafter, generic types.

10
00:00:25,166 --> 00:00:29,600
Let's start with functions and types.

11
00:00:29,600 --> 00:00:31,966
And I'm saying function and types

12
00:00:31,966 --> 00:00:34,333
because when we work with functions

13
00:00:34,333 --> 00:00:39,200
there are different places
where types can be assigned.

14
00:00:40,166 --> 00:00:41,966
Let's start by adding a function here.

15
00:00:41,966 --> 00:00:45,200
Let's say the add function
again which we saw before.

16
00:00:46,233 --> 00:00:49,900
The add function can get
parameters of course,

17
00:00:49,900 --> 00:00:53,333
like any function just as I did it before.

18
00:00:53,333 --> 00:00:57,000
And then for these parameters,
we can assign types.

19
00:00:57,000 --> 00:01:01,700
That's what we saw before
here in this first example.

20
00:01:01,700 --> 00:01:04,766
Just as we can set types for variables

21
00:01:04,766 --> 00:01:07,833
we can also set types for parameters.

22
00:01:07,833 --> 00:01:11,066
We can make it clear
that here we wanna allow

23
00:01:11,066 --> 00:01:13,066
numbers for example.

24
00:01:14,166 --> 00:01:16,366
And then I can return a plus b.

25
00:01:17,466 --> 00:01:19,033
But with that

26
00:01:19,033 --> 00:01:23,133
we also have one inferred
type here in this function.

27
00:01:23,133 --> 00:01:27,366
And do you see where we're
using type inference here?

28
00:01:28,466 --> 00:01:32,233
Well, here in this function,
I am returning a value

29
00:01:32,233 --> 00:01:37,233
and that tells TypeScript
something about the return type,

30
00:01:37,266 --> 00:01:40,733
the type of the returned
value of this function.

31
00:01:40,733 --> 00:01:43,666
And it infers this type.

32
00:01:43,666 --> 00:01:47,866
We can see the type it
infers if we hover over add.

33
00:01:47,866 --> 00:01:51,600
Then we see the TypeScript
definition of this function

34
00:01:51,600 --> 00:01:54,366
and we see that, of
course, for the parameters,

35
00:01:54,366 --> 00:01:55,733
we have the two types.

36
00:01:55,733 --> 00:01:58,600
We set up the number types, but then here

37
00:01:58,600 --> 00:02:03,100
after this function name
and the parameter list,

38
00:02:03,100 --> 00:02:06,100
this colon here, and this type here,

39
00:02:06,100 --> 00:02:07,666
that's not coming from us.

40
00:02:07,666 --> 00:02:09,500
We haven't added this code.

41
00:02:09,500 --> 00:02:13,633
Instead that's the
inferred return value type

42
00:02:13,633 --> 00:02:15,900
TypeScript infers here.

43
00:02:15,900 --> 00:02:20,700
So TypeScript knows that
here it will get a number

44
00:02:20,700 --> 00:02:24,666
as a return value because
it sees that this code

45
00:02:24,666 --> 00:02:28,600
with these parameters which
are always of type number

46
00:02:28,600 --> 00:02:30,533
can only return a number.

47
00:02:30,533 --> 00:02:33,666
There's no other value
that could be returned.

48
00:02:33,666 --> 00:02:37,966
And that's why this number
return value is inferred.

49
00:02:37,966 --> 00:02:40,666
We could also explicitly set it though.

50
00:02:40,666 --> 00:02:44,400
We can set the return type of a function

51
00:02:44,400 --> 00:02:48,700
by adding a colon after
this function parameter list

52
00:02:48,700 --> 00:02:50,966
and then setting the return type here,

53
00:02:50,966 --> 00:02:54,733
like number, or a string, or a union type,

54
00:02:54,733 --> 00:02:56,300
that would also be possible.

55
00:02:57,366 --> 00:03:01,033
That's something we can
do, but just as before,

56
00:03:01,033 --> 00:03:03,300
if you don't have a reason for doing that

57
00:03:03,300 --> 00:03:04,666
you shouldn't do that.

58
00:03:04,666 --> 00:03:07,333
TypeScript already infers a type here.

59
00:03:07,333 --> 00:03:09,700
And if that's the type you wanna stick to

60
00:03:09,700 --> 00:03:13,700
then there's no need to
explicitly define it yourself.

61
00:03:13,700 --> 00:03:17,066
Still, I wanna mention
this, that functions,

62
00:03:17,066 --> 00:03:20,366
when we work with types,
don't just use types

63
00:03:20,366 --> 00:03:24,233
for the parameters, but
also for the return value.

64
00:03:24,233 --> 00:03:27,433
That's easy to overlook,
but it makes a lot of sense

65
00:03:27,433 --> 00:03:31,833
because a function after all
does not have just some input.

66
00:03:31,833 --> 00:03:35,666
It also has some output and
hence it has a return type.

67
00:03:36,633 --> 00:03:38,733
Now there is a special return type

68
00:03:38,733 --> 00:03:40,766
which is also worth knowing.

69
00:03:40,766 --> 00:03:43,900
And for that, let me add a print function

70
00:03:43,900 --> 00:03:48,166
where I get a value and that
could indeed be of type any

71
00:03:48,166 --> 00:03:50,666
because the only thing
I'll do with that value

72
00:03:50,666 --> 00:03:53,200
is I'll console log it.

73
00:03:53,200 --> 00:03:56,866
So I don't really care
about the concrete type

74
00:03:56,866 --> 00:03:57,766
of this value.

75
00:03:57,766 --> 00:03:58,966
I'm just logging it.

76
00:03:59,333 --> 00:04:03,166
Now one important note about naming this function "print" though,

77
00:04:03,166 --> 00:04:07,966
which I unfortunately only discovered after I named the function like this.

78
00:04:07,966 --> 00:04:12,266
Of course, in JavaScript, there's a built-in "print" function already,

79
00:04:12,266 --> 00:04:16,066
so now this function will clash with this built-in function

80
00:04:16,100 --> 00:04:19,633
and hence if you would try to compile this TypeScript file

81
00:04:19,666 --> 00:04:22,066
you would be getting an error because of that,

82
00:04:22,066 --> 00:04:26,500
so maybe just name it "printOutput" or something like that.

83
00:04:26,600 --> 00:04:28,933
to avoid that error!

84
00:04:28,966 --> 00:04:31,800
But the important thing
about this print function

85
00:04:31,800 --> 00:04:36,500
now is that this function
does not return anything.

86
00:04:36,500 --> 00:04:40,000
It has no return statement
and therefore it has

87
00:04:40,000 --> 00:04:45,000
a special return type called void.

88
00:04:45,600 --> 00:04:49,966
Void is basically comparable
to nul and undefined,

89
00:04:49,966 --> 00:04:52,933
but it's only used in
conjunction with functions

90
00:04:52,933 --> 00:04:57,233
and it means that this
function never returns.

91
00:04:57,233 --> 00:04:59,800
So if I wanna work with the returned value

92
00:04:59,800 --> 00:05:03,566
from that function, I
will work with undefined

93
00:05:03,566 --> 00:05:07,366
and that's that special
wide type for functions,

94
00:05:07,366 --> 00:05:10,100
for the return value of functions.

