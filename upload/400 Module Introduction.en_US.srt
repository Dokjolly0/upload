1
00:00:02,000 --> 00:00:07,000
In this module, we'll dive into angular universal, which is an addition to angular, you could say.

2
00:00:07,430 --> 00:00:12,770
Now, as you know, Angular allows you to build frontman's user interfaces, user interfaces that run

3
00:00:12,770 --> 00:00:16,160
in the browser, your entire angular app runs in the browser.

4
00:00:16,760 --> 00:00:21,790
Angular Universal now allows you to pre render your angular app on the server.

5
00:00:22,130 --> 00:00:25,720
So it's not a server side framework like express chips or anything like that.

6
00:00:25,730 --> 00:00:33,080
You won't use it to write server side code, but it allows you to on the fly pre render pages, your

7
00:00:33,080 --> 00:00:39,500
users visit so that when the users load the page, they get that finished page served back and that

8
00:00:39,500 --> 00:00:41,960
initial rendering doesn't need to happen in the browser.

9
00:00:41,960 --> 00:00:46,930
And only subsequent actions by the user are then handled as always, in the browser only.

10
00:00:47,360 --> 00:00:49,130
Let me show you what exactly I mean.

11
00:00:50,210 --> 00:00:56,660
Here's the recipe book we built now for you, right click here and we view the page source, then what

12
00:00:56,660 --> 00:00:59,180
you see here is that you don't see much.

13
00:00:59,210 --> 00:01:03,470
We got the app root element here and then a bunch of secret imports.

14
00:01:03,470 --> 00:01:05,720
And this is how a normal angular app looks like.

15
00:01:06,020 --> 00:01:09,830
These script imports here are, in the end, our angular application.

16
00:01:09,860 --> 00:01:17,080
So the angular framework and decode, we wrote, compiled, optimized and bundled together and approved

17
00:01:17,090 --> 00:01:20,600
here simply marks the place where our code in the end will start rendering.

18
00:01:20,600 --> 00:01:27,380
The angular app that we see this on the screen is simply the case because the angular apps, all these

19
00:01:27,380 --> 00:01:34,010
scripts do their job and they change the page we're seeing after it has been loaded by the browser.

20
00:01:34,490 --> 00:01:36,950
It has happened so fast that we don't see that.

21
00:01:37,160 --> 00:01:39,410
But this is what's happening now.

22
00:01:39,420 --> 00:01:43,760
This approach generally is fine, but in some situations it might have downsides.

23
00:01:44,210 --> 00:01:47,450
Imagine that your users are on slower networks.

24
00:01:47,690 --> 00:01:54,380
In such cases, the JavaScript download might take a time, and until the JavaScript code has been downloaded,

25
00:01:54,530 --> 00:02:00,230
your users will see nothing or take search engines, a search engine.

26
00:02:00,260 --> 00:02:06,740
So the crawler of the search engine looks at different websites to index them, and the search engine

27
00:02:06,740 --> 00:02:09,680
only sees what's initially downloaded by the server.

28
00:02:09,920 --> 00:02:15,510
It doesn't necessarily wait for all your scripts to be done with rendering what the user sees.

29
00:02:15,650 --> 00:02:18,670
So a search engine might not see what the user sees in the end.

30
00:02:18,800 --> 00:02:24,230
Instead, it might see, well, this and as you can imagine, this is not so great for getting a good

31
00:02:24,230 --> 00:02:27,140
index score because you don't see much.

32
00:02:27,140 --> 00:02:27,380
Right.

33
00:02:27,380 --> 00:02:30,230
And that's what the search engine sees for such reasons.

34
00:02:30,230 --> 00:02:33,120
It would be good if that initial first request.

35
00:02:33,140 --> 00:02:37,880
So when you first visit the page, when you first load, it would be presented on the server so that

36
00:02:37,880 --> 00:02:40,160
we get a real HTML page sort back.

37
00:02:40,520 --> 00:02:45,830
That page will still contain all the script imports because it will be converted into an angular app

38
00:02:45,830 --> 00:02:51,470
after it has been loaded so that subsequent clicks are again handled in the browser, only to be fast

39
00:02:51,470 --> 00:02:52,160
and reactive.

40
00:02:52,310 --> 00:02:58,580
But that first load is handled on the server that fixes the search engine problem and also fixes the

41
00:02:58,580 --> 00:03:02,090
issue of slower connections and angular universal helps us with that.

