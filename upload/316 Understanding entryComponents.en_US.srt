1
00:00:02,130 --> 00:00:04,440
Well, we proceeded with rendering

2
00:00:04,440 --> 00:00:05,780
the component programmatically,

3
00:00:05,780 --> 00:00:09,340
but now when we try to test that, we had this strange error.

4
00:00:09,340 --> 00:00:11,210
And a quick side note here,

5
00:00:11,210 --> 00:00:15,120
if you're not getting this error, if it just works for you,

6
00:00:15,120 --> 00:00:16,110
then this is the case

7
00:00:16,110 --> 00:00:18,920
because you are using Angular 9 or higher.

8
00:00:18,920 --> 00:00:20,550
This is simply a tiny change

9
00:00:20,550 --> 00:00:22,650
that was made behind the scenes of Angular,

10
00:00:22,650 --> 00:00:25,040
so the general syntax it's on didn't change.

11
00:00:25,040 --> 00:00:27,830
What I showed you works in all Angular versions,

12
00:00:27,830 --> 00:00:30,170
but in Angular 9 or higher,

13
00:00:30,170 --> 00:00:31,870
there was a behind the scenes change,

14
00:00:31,870 --> 00:00:33,990
which makes this work out of the box.

15
00:00:33,990 --> 00:00:34,980
Which of course is great,

16
00:00:34,980 --> 00:00:36,800
but if you are getting this error,

17
00:00:36,800 --> 00:00:38,130
which at all it's not unlikely

18
00:00:38,130 --> 00:00:40,440
because not everyone is using the latest version.

19
00:00:40,440 --> 00:00:43,060
Well, then here's why we get it.

20
00:00:43,060 --> 00:00:46,240
It didn't find a component factory follower to component.

21
00:00:46,240 --> 00:00:47,900
Well, we created one here,

22
00:00:47,900 --> 00:00:50,260
why didn't it find that factory?

23
00:00:50,260 --> 00:00:52,390
Well, ignore the first part,

24
00:00:52,390 --> 00:00:53,800
this here is the interesting part.

25
00:00:53,800 --> 00:00:55,963
Did you add it to Ngmodule entryComponents?

26
00:00:57,376 --> 00:00:58,570
For this, you need to understand

27
00:00:58,570 --> 00:01:01,020
how Angular actually works behind the scenes

28
00:01:01,020 --> 00:01:03,420
when it comes to creating components.

29
00:01:03,420 --> 00:01:07,290
Of course, any component, as well as directives and pipes

30
00:01:07,290 --> 00:01:09,010
you plan on working with,

31
00:01:09,010 --> 00:01:11,530
you need to add them to your declarations array.

32
00:01:11,530 --> 00:01:13,580
And we did this for the alert component.

33
00:01:13,580 --> 00:01:17,030
We did this for all the components that were loaded.

34
00:01:17,030 --> 00:01:19,480
This is important for Angular to understand

35
00:01:19,480 --> 00:01:22,230
what's a component or which components and directives,

36
00:01:22,230 --> 00:01:23,830
and it's all you have in your app,

37
00:01:23,830 --> 00:01:26,810
because it does not automatically scan all your files,

38
00:01:26,810 --> 00:01:29,490
you'd need to tell it which components exist.

39
00:01:29,490 --> 00:01:32,760
Still, this alone only makes angular aware of it

40
00:01:32,760 --> 00:01:35,530
so that it is able to create such a component

41
00:01:35,530 --> 00:01:38,070
when it finds it in one of two places.

42
00:01:38,070 --> 00:01:41,930
The first place would be in your templates.

43
00:01:41,930 --> 00:01:43,830
If in your templates,

44
00:01:43,830 --> 00:01:48,830
let's say off the recipe list component here.

45
00:01:49,160 --> 00:01:51,560
If it finds something like app recipe item,

46
00:01:51,560 --> 00:01:53,220
like this selector,

47
00:01:53,220 --> 00:01:55,840
it basically looks into the declarations array,

48
00:01:55,840 --> 00:01:59,090
finds it there, and then is able to create that component.

49
00:01:59,090 --> 00:02:00,350
Great.

50
00:02:00,350 --> 00:02:04,030
The other place where angler will look for this component

51
00:02:04,030 --> 00:02:05,840
is in your routes.

52
00:02:05,840 --> 00:02:09,380
In your route conflict, when you point at a component there

53
00:02:09,380 --> 00:02:12,307
angular will also check that in the declarations array,

54
00:02:12,307 --> 00:02:13,570
and if it finds it there,

55
00:02:13,570 --> 00:02:16,690
it is able to create such a component and load it.

56
00:02:16,690 --> 00:02:19,580
Now, one place that does not work by default

57
00:02:19,580 --> 00:02:22,970
is when you want to create the component manually in code,

58
00:02:22,970 --> 00:02:24,720
which is the exact thing we're trying to do

59
00:02:24,720 --> 00:02:26,250
in the off component.

60
00:02:26,250 --> 00:02:28,850
There we're creating our own component factory

61
00:02:28,850 --> 00:02:30,200
with the alert component.

62
00:02:30,200 --> 00:02:33,870
And now here, Angular does not automatically reach out

63
00:02:33,870 --> 00:02:35,230
to the declarations array.

64
00:02:35,230 --> 00:02:37,050
It simply doesn't do that.

65
00:02:37,050 --> 00:02:40,250
You can complain about that, still it's the case.

66
00:02:40,250 --> 00:02:43,780
You'd instead deliberately need to inform Angular

67
00:02:43,780 --> 00:02:45,970
that in this case, the alert component

68
00:02:45,970 --> 00:02:48,680
will need to be created at some place

69
00:02:48,680 --> 00:02:52,180
and that Angular basically should be prepared for this.

70
00:02:52,180 --> 00:02:54,880
It will prepare itself for this creation

71
00:02:54,880 --> 00:02:56,910
when it finds a component in the template

72
00:02:56,910 --> 00:02:59,950
or in a route conflict, but here it won't.

73
00:02:59,950 --> 00:03:01,270
Now to tell Angular

74
00:03:01,270 --> 00:03:04,170
to be prepared for the creation of that component,

75
00:03:04,170 --> 00:03:07,950
you need to add a special property to the object

76
00:03:07,950 --> 00:03:10,060
you pass to Ngmodule.

77
00:03:10,060 --> 00:03:12,710
Besides declarations imports and so on,

78
00:03:12,710 --> 00:03:16,000
there is a property we haven't worked with thus far,

79
00:03:16,000 --> 00:03:18,260
and that is entry components.

80
00:03:18,260 --> 00:03:20,580
Entry components also is an array

81
00:03:20,580 --> 00:03:23,010
and it's an array of components types,

82
00:03:23,010 --> 00:03:24,700
but only of components

83
00:03:24,700 --> 00:03:29,460
that will eventually need to be created without a selector

84
00:03:29,460 --> 00:03:31,130
or the route contact being used.

85
00:03:31,130 --> 00:03:34,540
So whenever a component is created by a selector,

86
00:03:34,540 --> 00:03:37,340
or you use it with the route configuration,

87
00:03:37,340 --> 00:03:38,650
you don't need to add it here.

88
00:03:38,650 --> 00:03:40,760
Which is why thus far

89
00:03:40,760 --> 00:03:44,173
we have the added anything to entryComponents.

90
00:03:44,173 --> 00:03:45,930
For AlertComponent, it's differently.

91
00:03:45,930 --> 00:03:48,755
And there, you simply need to add AlertComponent

92
00:03:48,755 --> 00:03:50,370
to entryComponents.

93
00:03:50,370 --> 00:03:51,370
Now, one for note

94
00:03:51,370 --> 00:03:53,310
about this entryComponents property though,

95
00:03:53,310 --> 00:03:55,420
depending on the Angular version you're using,

96
00:03:55,420 --> 00:03:57,000
you might not need it.

97
00:03:57,000 --> 00:03:59,400
If you are working in a project

98
00:03:59,400 --> 00:04:02,140
that uses Angular 9 or higher,

99
00:04:02,140 --> 00:04:04,410
and you can check your package.json file

100
00:04:04,410 --> 00:04:06,780
to find out which version you're using,

101
00:04:06,780 --> 00:04:09,610
if you're in a project with Angular 9 or higher,

102
00:04:09,610 --> 00:04:12,760
you can emit entry components by default

103
00:04:12,760 --> 00:04:14,240
because they're Angular

104
00:04:14,240 --> 00:04:17,190
and the hood uses a different rendering engine.

105
00:04:17,190 --> 00:04:20,540
Its name is Ivy and there it works differently

106
00:04:20,540 --> 00:04:21,373
under the hood.

107
00:04:21,373 --> 00:04:23,410
So the abra syntax doesn't change.

108
00:04:23,410 --> 00:04:26,410
The only difference is that you can omit entry components.

109
00:04:26,410 --> 00:04:29,900
You don't have to specifying a day or two, isn't a problem,

110
00:04:29,900 --> 00:04:31,610
you will never make an error

111
00:04:31,610 --> 00:04:33,720
if you do specify entry components,

112
00:04:33,720 --> 00:04:36,540
just in some cases, you could omit it.

113
00:04:36,540 --> 00:04:39,120
Now, Angular is ready to create it's component

114
00:04:39,120 --> 00:04:41,150
whenever you prompt it to,

115
00:04:41,150 --> 00:04:45,030
and you do prompt it to create that component here.

116
00:04:45,030 --> 00:04:46,570
So now if you saved this

117
00:04:46,570 --> 00:04:50,440
after adding that component to the entryComponents list,

118
00:04:50,440 --> 00:04:54,320
and you try this again, you get your component here.

119
00:04:54,320 --> 00:04:57,470
And this is now created programmatically in code,

120
00:04:57,470 --> 00:04:59,060
but of course it's not working correctly.

121
00:04:59,060 --> 00:05:00,070
We can't dismiss it,

122
00:05:00,070 --> 00:05:01,960
and we're also not seeing a message here.

123
00:05:01,960 --> 00:05:03,863
How can we make this work?

